{
  "info": {
    "_postman_id": "c0a49f23-f5f3-484c-8726-1412d70d5fd9",
    "name": "functionality test",
    "description": "test basic functionality by scenario\n\n### scenario\n\n1. sign up a user\n    \n2. sign in as that user\n    \n3. register a new task\n    \n4. get the uesr's tasks\n    \n5. start the task\n    \n6. update the task's memo\n    \n7. finish the task",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12435323"
  },
  "item": [
    {
      "name": "Sign up",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var code = pm.response.code;",
              "var { message } = pm.response.json();",
              "",
              "pm.test(\"Status check\", () => {",
              "  pm.expect(code, \"status code must be 201\").to.equal(201);",
              "  pm.expect(message, 'response message must be \"User Created\"').to.equal(",
              "    \"User Created\"",
              "  );",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"id\": \"{{userId}}\",\n    \"password\": \"{{password}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/users",
          "host": ["{{base_url}}"],
          "path": ["users"]
        }
      },
      "response": []
    },
    {
      "name": "Sign in",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var code = pm.response.code;",
              "var { message, data } = pm.response.json();",
              "",
              "pm.test(\"Status check\", () => {",
              "  pm.expect(code, \"status code must be 200\").to.equal(200);",
              "  pm.expect(message, 'response message must be \"Access Accepted\"').to.equal(",
              "    \"Access Accepted\"",
              "  );",
              "});",
              "",
              "pm.test(\"Data validation check\", () => {",
              "  pm.expect(data.token, \"response body must have access token\").to.be.a(",
              "    \"string\"",
              "  );",
              "  pm.variables.set(\"token\", data.token);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"password\": \"{{password}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/users/:user_id/token",
          "host": ["{{base_url}}"],
          "path": ["users", ":user_id", "token"],
          "variable": [
            {
              "key": "user_id",
              "value": "{{userId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Register task",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var Ajv = require(\"ajv\");",
              "var ajv = new Ajv();",
              "",
              "var code = pm.response.code;",
              "var { message, data } = pm.response.json();",
              "pm.variables.set(\"taskId\", data.task.id);",
              "",
              "pm.test(\"Status check\", () => {",
              "  pm.expect(code, \"status code must be 201\").to.equal(201);",
              "  pm.expect(message, 'response message must be \"Task Created\"').to.equal(",
              "    \"Task Created\"",
              "  );",
              "});",
              "",
              "pm.test(\"Data validation check\", () => {",
              "  const todoSchema = {",
              "    type: \"object\",",
              "    properties: {",
              "      id: { type: \"number\" },",
              "      user_id: { type: \"string\" },",
              "      progress: { const: \"todo\" },",
              "      content: { type: \"string\" },",
              "      memo: { type: \"string\" },",
              "      deadline: { type: \"string\" },",
              "    },",
              "    required: [\"id\", \"user_id\", \"progress\", \"content\", \"memo\", \"deadline\"],",
              "  };",
              "  pm.expect(",
              "    ajv.validate(todoSchema, data.task),",
              "    \"response body must have task in progress todo\"",
              "  ).to.be.true;",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"{{content}}\",\n    \"deadline\": \"{{deadline}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/tasks",
          "host": ["{{base_url}}"],
          "path": ["tasks"]
        }
      },
      "response": []
    },
    {
      "name": "Get todo list and doing",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var Ajv = require(\"ajv\");",
              "var ajv = new Ajv();",
              "",
              "var code = pm.response.code;",
              "var { message, data } = pm.response.json();",
              "",
              "pm.test(\"Status check\", () => {",
              "  pm.expect(code, \"status code must be 200\").to.equal(200);",
              "  pm.expect(message, 'response message must be \"Query Accepted\"').to.equal(",
              "    \"Query Accepted\"",
              "  );",
              "});",
              "",
              "pm.test(\"Data validation check\", () => {",
              "  const taskListSchema = {",
              "    type: \"array\",",
              "    items: {",
              "      type: \"object\",",
              "      properties: {",
              "        id: { type: \"number\" },",
              "        user_id: { type: \"string\" },",
              "        progress: { const: \"todo\" },",
              "        content: { type: \"string\" },",
              "        memo: { type: \"string\" },",
              "        deadline: { type: \"string\" },",
              "        registerd_at: { type: \"string\" },",
              "        started_at: { type: [\"string\", \"null\"] },",
              "        finished_at: { type: [\"string\", \"null\"] },",
              "      },",
              "      required: [",
              "        \"id\",",
              "        \"user_id\",",
              "        \"progress\",",
              "        \"content\",",
              "        \"memo\",",
              "        \"deadline\",",
              "        \"registerd_at\",",
              "        \"started_at\",",
              "        \"finished_at\",",
              "      ],",
              "    },",
              "  };",
              "  pm.expect(",
              "    ajv.validate(taskListSchema, data.taskList),",
              "    \"response body must have task list\"",
              "  ).to.be.true;",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/tasks?progress=todo&progress=doing&sort=deadline",
          "host": ["{{base_url}}"],
          "path": ["tasks"],
          "query": [
            {
              "key": "progress",
              "value": "todo"
            },
            {
              "key": "progress",
              "value": "doing"
            },
            {
              "key": "sort",
              "value": "deadline"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Start task",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var Ajv = require(\"ajv\");",
              "var ajv = new Ajv();",
              "",
              "var code = pm.response.code;",
              "var { message, data } = pm.response.json();",
              "",
              "pm.test(\"Status check\", () => {",
              "  pm.expect(code, \"status code must be 200\").to.equal(200);",
              "  pm.expect(message, 'response message must be \"task Started\"').to.equal(",
              "    \"Task Started\"",
              "  );",
              "});",
              "",
              "pm.test(\"Data validation check\", () => {",
              "  const doingSchema = {",
              "    type: \"object\",",
              "    properties: {",
              "      id: { type: \"number\" },",
              "      user_id: { type: \"string\" },",
              "      progress: { const: \"doing\" },",
              "      content: { type: \"string\" },",
              "      memo: { type: \"string\" },",
              "      deadline: { type: \"string\" },",
              "    },",
              "    required: [\"id\", \"user_id\", \"progress\", \"content\", \"memo\", \"deadline\"],",
              "  };",
              "  pm.expect(",
              "    ajv.validate(doingSchema, data.task),",
              "    \"response body must have task in progress doing\"",
              "  ).to.be.true;",
              "  pm.expect(data.task.id, \"the task's id must be an id from request\").to.equal(",
              "    pm.variables.get(\"taskId\")",
              "  );",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"action\": \"start\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/tasks/:task_id",
          "host": ["{{base_url}}"],
          "path": ["tasks", ":task_id"],
          "variable": [
            {
              "key": "task_id",
              "value": "{{taskId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update memo",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var Ajv = require(\"ajv\");",
              "var ajv = new Ajv();",
              "",
              "var code = pm.response.code;",
              "var { message, data } = pm.response.json();",
              "",
              "pm.test(\"Status check\", () => {",
              "  pm.expect(code, \"status code must be 200\").to.equal(200);",
              "  pm.expect(message, 'response message must be \"Memo Updated\"').to.equal(",
              "    \"Memo Updated\"",
              "  );",
              "});",
              "",
              "pm.test(\"Data validation check\", () => {",
              "  const taskSchema = {",
              "    type: \"object\",",
              "    properties: {",
              "      id: { type: \"number\" },",
              "      user_id: { type: \"string\" },",
              "      progress: { enum: [\"todo\", \"doing\", \"done\"] },",
              "      content: { type: \"string\" },",
              "      memo: { type: \"string\" },",
              "      deadline: { type: \"string\" },",
              "    },",
              "    required: [\"id\", \"user_id\", \"progress\", \"content\", \"memo\", \"deadline\"],",
              "  };",
              "  pm.expect(ajv.validate(taskSchema, data.task), \"response body must have task\")",
              "    .to.be.true;",
              "  pm.expect(data.task.id, \"the task's id must be an id from request\").to.equal(",
              "    pm.variables.get(\"taskId\")",
              "  );",
              "  pm.expect(",
              "    data.task.memo,",
              "    \"the task's memo must be a memo from request\"",
              "  ).to.equal(pm.variables.get(\"memo\"));",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"memo\": \"{{memo}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/tasks/:task_id/memo",
          "host": ["{{base_url}}"],
          "path": ["tasks", ":task_id", "memo"],
          "variable": [
            {
              "key": "task_id",
              "value": "{{taskId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Finish task",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var Ajv = require(\"ajv\");",
              "var ajv = new Ajv();",
              "",
              "var code = pm.response.code;",
              "var { message, data } = pm.response.json();",
              "",
              "pm.test(\"Status check\", () => {",
              "  pm.expect(code, \"status code must be 200\").to.equal(200);",
              "  pm.expect(message, 'response message must be \"Task Finished\"').to.equal(",
              "    \"Task Finished\"",
              "  );",
              "});",
              "",
              "pm.test(\"Data validation check\", () => {",
              "  const doneSchema = {",
              "    type: \"object\",",
              "    properties: {",
              "      id: { type: \"number\" },",
              "      user_id: { type: \"string\" },",
              "      progress: { const: \"done\" },",
              "      content: { type: \"string\" },",
              "      memo: { type: \"string\" },",
              "      deadline: { type: \"string\" },",
              "    },",
              "    required: [\"id\", \"user_id\", \"progress\", \"content\", \"memo\", \"deadline\"],",
              "  };",
              "  pm.expect(",
              "    ajv.validate(doneSchema, data.task),",
              "    \"response body must have task in progress done\"",
              "  ).to.be.true;",
              "  pm.expect(data.task.id, \"the task's id must be an id from request\").to.equal(",
              "    pm.variables.get(\"taskId\")",
              "  );",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"action\": \"finish\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/tasks/:task_id",
          "host": ["{{base_url}}"],
          "path": ["tasks", ":task_id"],
          "variable": [
            {
              "key": "task_id",
              "value": "{{taskId}}"
            }
          ]
        }
      },
      "response": []
    }
  ]
}
